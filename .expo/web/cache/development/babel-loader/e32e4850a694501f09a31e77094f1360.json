{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _class,\n    _class2,\n    _temp,\n    _jsxFileName = \"D:\\\\PROGRAMIRANJE\\\\StarWarsApp\\\\swapp\\\\screens\\\\CharacterList.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useContext } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Constants from 'expo-constants';\nimport { RootStoreContext } from \"../store/RootStoreContext\";\nimport { observer } from 'mobx-react';\n\nvar CharacterList = observer(_class = (_temp = _class2 = function (_React$Component) {\n  _inherits(CharacterList, _React$Component);\n\n  var _super = _createSuper(CharacterList);\n\n  function CharacterList() {\n    _classCallCheck(this, CharacterList);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CharacterList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var characterStore = this.context.characterStore;\n      characterStore.load();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$context = this.context,\n          characterStore = _this$context.characterStore,\n          favCharacterStore = _this$context.favCharacterStore;\n      var people = characterStore.people,\n          loading = characterStore.loading;\n      var navigation = this.props.navigation;\n      var charList = people.map(function (character) {\n        return React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return _this.props.navigation.navigate('CharacterDetails', {\n              character: character\n            });\n          },\n          key: character.url,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 14\n          }\n        }, React.createElement(View, {\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 14\n          }\n        }, React.createElement(Text, {\n          style: styles.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 18\n          }\n        }, \"Name: \", character.name), React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 18\n          }\n        }, \"Height: \", character.height), React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 18\n          }\n        }, \"Mass: \", character.mass), React.createElement(Button, {\n          onPress: function onPress() {\n            return favCharacterStore.addToFavList(character, character.url);\n          },\n          style: styles.button,\n          title: \"Add to favs\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 18\n          }\n        })));\n      });\n\n      if (loading) {\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 12\n          }\n        }, React.createElement(ActivityIndicator, {\n          size: \"small\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 16\n          }\n        }));\n      }\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 14\n        }\n      }, React.createElement(ScrollView, {\n        style: styles.scrollView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 16\n        }\n      }, React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 18\n        }\n      }, charList)));\n    }\n  }]);\n\n  return CharacterList;\n}(React.Component), _class2.contextType = RootStoreContext, _temp)) || _class;\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: Constants.statusBarHeight,\n    justifyContent: 'space-around'\n  },\n  text: {\n    color: '#fff'\n  },\n  scrollView: {\n    backgroundColor: 'pink'\n  },\n  button: {\n    width: 50\n  }\n});\nexport default CharacterList;","map":{"version":3,"sources":["D:/PROGRAMIRANJE/StarWarsApp/swapp/screens/CharacterList.js"],"names":["React","useContext","Constants","RootStoreContext","observer","CharacterList","characterStore","context","load","favCharacterStore","people","loading","navigation","props","charList","map","character","navigate","url","styles","container","text","name","height","mass","addToFavList","button","scrollView","Component","contextType","StyleSheet","create","flex","marginTop","statusBarHeight","justifyContent","color","backgroundColor","width"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\r\nimport { StyleSheet, View, Text,  ScrollView, ActivityIndicator,SafeAreaView, TouchableOpacity, Button, Alert} from 'react-native';\r\nimport Constants from 'expo-constants';\r\nimport { RootStoreContext } from '../store/RootStoreContext';\r\nimport { observer } from 'mobx-react';\r\n\r\n\r\n\r\n@observer\r\nclass CharacterList extends React.Component {\r\n    //The contextType property on a class can be assigned a Context object created by React.createContext() \r\n    //created inside RootSToreContext\r\n    //This lets you consume the nearest current value of that Context type using this.context\r\n    //You can reference this in any of the lifecycle methods including the render function.\r\n  static contextType=RootStoreContext;\r\n    \r\n    componentDidMount () {\r\n        //render data on load()\r\n        const {characterStore} = this.context;\r\n        characterStore.load();\r\n   }\r\n   \r\n   render() {\r\n      \r\n       const {characterStore, favCharacterStore} = this.context;\r\n   \r\n         const { people, loading } = characterStore;\r\n      \r\n         const { navigation } = this.props;\r\n         const charList = people.map((character)=> (\r\n             <TouchableOpacity \r\n               onPress={() => this.props.navigation.navigate('CharacterDetails', {character})} \r\n               key={character.url} \r\n            >\r\n             <View  style={styles.container}  >\r\n                 <Text style={styles.text} >Name: {character.name}</Text>\r\n                 <Text>Height: {character.height}</Text>\r\n                 <Text>Mass: {character.mass}</Text>\r\n                 <Button onPress={() =>favCharacterStore.addToFavList(character, character.url)} style={styles.button} title=\"Add to favs\"></Button>\r\n             </View>\r\n             </TouchableOpacity>\r\n            \r\n         ))\r\n       if (loading) {\r\n           return (\r\n           <View>\r\n               <ActivityIndicator size=\"small\" />\r\n              \r\n           </View>)\r\n       }\r\n        return (\r\n             <View style={styles.container}>\r\n               <ScrollView style={styles.scrollView}>\r\n                 <View style={styles.container}>{charList}</View>\r\n               </ScrollView>\r\n            </View> \r\n        )\r\n       \r\n             \r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        marginTop: Constants.statusBarHeight,\r\n        justifyContent:'space-around'\r\n    },\r\n    text: {\r\n        color: '#fff',\r\n       \r\n       \r\n     }, \r\n     scrollView: {\r\n        backgroundColor: 'pink',\r\n        \r\n      },\r\n      button: {\r\n        width: 50\r\n      },\r\n   });\r\n   \r\nexport default CharacterList;"]},"metadata":{},"sourceType":"module"}