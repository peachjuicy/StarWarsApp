{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\PROGRAMIRANJE\\\\StarWarsApp\\\\swapp\\\\screens\\\\CharacterList.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useContext } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Constants from 'expo-constants';\nimport { StoreContext } from \"../App\";\n\nvar CharacterList = function (_React$Component) {\n  _inherits(CharacterList, _React$Component);\n\n  var _super = _createSuper(CharacterList);\n\n  function CharacterList() {\n    _classCallCheck(this, CharacterList);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CharacterList, [{\n    key: \"render\",\n    value: function render() {\n      var rootStore = this.context;\n      var _rootStore$characterS = rootStore.characterStore,\n          people = _rootStore$characterS.people,\n          loading = _rootStore$characterS.loading;\n      console.log(people);\n      var navigation = this.props.navigation;\n      var charList = people.map(function (item) {\n        return React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return navigation.navigate('CharacterDetails');\n          },\n          key: item.height,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 14\n          }\n        }, React.createElement(View, {\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 14\n          }\n        }, React.createElement(Text, {\n          style: styles.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 18\n          }\n        }, \"Name: \", item.name), React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 18\n          }\n        }, \"Height: \", item.height), React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 18\n          }\n        }, \"Mass: \", item.mass)));\n      });\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 14\n        }\n      }, loading && React.createElement(ActivityIndicator, {\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 29\n        }\n      }), !loading && React.createElement(SafeAreaView, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }\n      }, React.createElement(ScrollView, {\n        style: styles.scrollView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 26\n        }\n      }, React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 24\n        }\n      }, charList))));\n    }\n  }]);\n\n  return CharacterList;\n}(React.Component);\n\nCharacterList.contextType = StoreContext;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: Constants.statusBarHeight,\n    justifyContent: 'space-around'\n  },\n  text: {\n    color: '#fff'\n  },\n  scrollView: {\n    backgroundColor: 'pink'\n  }\n});\nexport default CharacterList;","map":{"version":3,"sources":["D:/PROGRAMIRANJE/StarWarsApp/swapp/screens/CharacterList.js"],"names":["React","useContext","Constants","StoreContext","CharacterList","rootStore","context","characterStore","people","loading","console","log","navigation","props","charList","map","item","navigate","height","styles","container","text","name","mass","scrollView","Component","contextType","StyleSheet","create","flex","marginTop","statusBarHeight","justifyContent","color","backgroundColor"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;;;;;;;AAEA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,SAASC,YAAT;;IAEMC,a;;;;;;;;;;;;;6BAwBM;AACJ,UAAMC,SAAS,GAAG,KAAKC,OAAvB;AADI,kCAEwBD,SAAS,CAACE,cAFlC;AAAA,UAEKC,MAFL,yBAEKA,MAFL;AAAA,UAEaC,OAFb,yBAEaA,OAFb;AAGHC,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AAHG,UAIKI,UAJL,GAIoB,KAAKC,KAJzB,CAIKD,UAJL;AAKH,UAAME,QAAQ,GAAGN,MAAM,CAACO,GAAP,CAAW,UAACC,IAAD;AAAA,eACxB,oBAAC,gBAAD;AAAkB,UAAA,OAAO,EAAE;AAAA,mBAAMJ,UAAU,CAACK,QAAX,CAAoB,kBAApB,CAAN;AAAA,WAA3B;AAA0E,UAAA,GAAG,EAAED,IAAI,CAACE,MAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA,oBAAC,IAAD;AAAO,UAAA,KAAK,EAAEC,MAAM,CAACC,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAED,MAAM,CAACE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAkCL,IAAI,CAACM,IAAvC,CADJ,EAEI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAeN,IAAI,CAACE,MAApB,CAFJ,EAGI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAaF,IAAI,CAACO,IAAlB,CAHJ,CADA,CADwB;AAAA,OAAX,CAAjB;AAWD,aAEK,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEJ,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACIX,OAAO,IAAI,oBAAC,iBAAD;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADf,EAEI,CAACA,OAAD,IACG,oBAAC,YAAD;AAAc,QAAA,KAAK,EAAEU,MAAM,CAACC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,oBAAC,UAAD;AAAY,QAAA,KAAK,EAAED,MAAM,CAACK,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACF,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEL,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgCN,QAAhC,CADE,CADL,CAHP,CAFL;AA4BH;;;;EApEuBd,KAAK,CAACyB,S;;AAA5BrB,a,CACGsB,W,GAAYvB,Y;AAsErB,IAAMgB,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC7BR,EAAAA,SAAS,EAAE;AACPS,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,SAAS,EAAE5B,SAAS,CAAC6B,eAFd;AAGPC,IAAAA,cAAc,EAAC;AAHR,GADkB;AAM7BX,EAAAA,IAAI,EAAE;AACFY,IAAAA,KAAK,EAAE;AADL,GANuB;AAW5BT,EAAAA,UAAU,EAAE;AACTU,IAAAA,eAAe,EAAE;AADR;AAXgB,CAAlB,CAAf;AAiBA,eAAe9B,aAAf","sourcesContent":["import React, { useContext } from 'react';\r\nimport { StyleSheet, View, Text,  ScrollView, ActivityIndicator,SafeAreaView, TouchableOpacity} from 'react-native';\r\nimport Constants from 'expo-constants';\r\nimport { StoreContext } from '../App';\r\n\r\nclass CharacterList extends React.Component {\r\n  static contextType=StoreContext;\r\n    /* state = {\r\n        people: [],\r\n        loading:true\r\n    }\r\n\r\n    async componentDidMount() {\r\n     \r\n        //Have a try and catch block for catching errors.\r\n        try {\r\n            //Assign the promise unresolved first then get the data using the json method. \r\n            const swApiCall = await fetch('https://swapi.dev/api/people/');\r\n            const swchar = await swApiCall.json();\r\n            this.setState({people: swchar.results, \r\n                loading: false});\r\n              \r\n        } catch(err) {\r\n            console.log(\"Error fetching data-----------\", err);\r\n        }\r\n    } */\r\n    \r\n    \r\n \r\n   render() {\r\n        const rootStore = this.context;\r\n         const { people, loading} = rootStore.characterStore;\r\n         console.log(people)\r\n         const { navigation } = this.props;\r\n         const charList = people.map((item)=> (\r\n             <TouchableOpacity onPress={() => navigation.navigate('CharacterDetails')} key={item.height} >\r\n             <View  style={styles.container}  >\r\n                 <Text style={styles.text} >Name: {item.name}</Text>\r\n                 <Text>Height: {item.height}</Text>\r\n                 <Text>Mass: {item.mass}</Text>\r\n             </View>\r\n             </TouchableOpacity>\r\n            \r\n         ))\r\n       \r\n        return (\r\n           \r\n             <View style={styles.container}>\r\n                {loading && <ActivityIndicator size=\"small\"/>}\r\n                {!loading && (\r\n                    <SafeAreaView style={styles.container}>\r\n                         <ScrollView style={styles.scrollView}>\r\n                       <View style={styles.container}>{charList}</View>\r\n                    </ScrollView>\r\n                    </SafeAreaView>\r\n            \r\n                )}\r\n            </View> )\r\n       \r\n       /*  const renderCharList=people.map((charItem)=> {\r\n            console.log(\"helo\", charItem.name)\r\n            return ( <View style={styles.container} key={charItem.height}><Text style={styles.text}>{charItem.name}</Text></View>)\r\n        })\r\n       \r\n            if (loading) {\r\n                <ActivityIndicator/>\r\n            }\r\n           return (\r\n                \r\n                 <View style={styles.container}>\r\n               <Text style={styles.text}>{renderCharList}</Text>\r\n               </View>)  */\r\n             \r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        marginTop: Constants.statusBarHeight,\r\n        justifyContent:'space-around'\r\n    },\r\n    text: {\r\n        color: '#fff',\r\n       \r\n       \r\n     }, \r\n     scrollView: {\r\n        backgroundColor: 'pink',\r\n        \r\n      },\r\n   });\r\n   \r\nexport default CharacterList;"]},"metadata":{},"sourceType":"module"}