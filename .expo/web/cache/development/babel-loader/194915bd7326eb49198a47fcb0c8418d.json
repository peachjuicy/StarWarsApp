{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _temp;\n\nimport { observable, action } from 'mobx';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nexport var CharacterStore = (_class = (_temp = function () {\n  function CharacterStore() {\n    _classCallCheck(this, CharacterStore);\n\n    _initializerDefineProperty(this, \"people\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"loading\", _descriptor2, this);\n  }\n\n  _createClass(CharacterStore, [{\n    key: \"load\",\n    value: function load() {\n      var swApiCall, swchar;\n      return _regeneratorRuntime.async(function load$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.people.length) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              this.loading = true;\n              _context.prev = 3;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(fetch('https://swapi.dev/api/people/'));\n\n            case 6:\n              swApiCall = _context.sent;\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(swApiCall.json());\n\n            case 9:\n              swchar = _context.sent;\n              console.log(\"Chars are\", swchar.results);\n              this.people.replace(swchar.results);\n              this.loading = false;\n              _context.next = 19;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](3);\n              Alert.alert(\"Something went wrong!\");\n              this.loading = false;\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[3, 15]], Promise);\n    }\n  }]);\n\n  return CharacterStore;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"people\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"loading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"load\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"load\"), _class.prototype)), _class);","map":{"version":3,"sources":["D:/PROGRAMIRANJE/StarWarsApp/swapp/store/CharacterStore.js"],"names":["observable","action","CharacterStore","people","length","loading","fetch","swApiCall","json","swchar","console","log","results","replace","Alert","alert"],"mappings":";;;;;;;;;AAAA,SAAQA,UAAR,EAAoBC,MAApB,QAAkC,MAAlC;;AAIC,WAAaC,cAAb;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAUW,KAAKC,MAAL,CAAYC,MAVvB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAaO,mBAAKC,OAAL,GAAa,IAAb;AAbP;AAAA;AAAA,+CAgBmCC,KAAK,CAAC,+BAAD,CAhBxC;;AAAA;AAgBiBC,cAAAA,SAhBjB;AAAA;AAAA,+CAiBgCA,SAAS,CAACC,IAAV,EAjBhC;;AAAA;AAiBiBC,cAAAA,MAjBjB;AAkBWC,cAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,MAAM,CAACG,OAAhC;AAEA,mBAAKT,MAAL,CAAYU,OAAZ,CAAoBJ,MAAM,CAACG,OAA3B;AAEA,mBAAKP,OAAL,GAAe,KAAf;AAtBX;AAAA;;AAAA;AAAA;AAAA;AAwBWS,cAAAA,KAAK,CAACC,KAAN,CAAY,uBAAZ;AACA,mBAAKV,OAAL,GAAe,KAAf;;AAzBX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mFAEIL,UAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,WAEwB,EAFxB;AAAA;AAAA,2EAIIA,UAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,WAIyB,KAJzB;AAAA;AAAA,yDAQIC,MARJ","sourcesContent":["import {observable, action } from 'mobx';\r\nimport { Alert } from 'react-native';\r\n\r\n// store for characters and api call \r\n export class CharacterStore {\r\n     //observable empty array at the beginning\r\n    @observable people = []\r\n   //@observable loading property which is false at the beginning \r\n    @observable loading = false\r\n    //action to modify the state. It immutably replaces an empty people array at the beginning with a new one (characters from api call)\r\n    //actions are used only on function which modify state and only on functions which are currently running\r\n    //which is why we need the async/await keywords so theh code doesn't executes without waiting for the fetch to complete\r\n    @action\r\n    async load () {\r\n        if (this.people.length) {\r\n            return \r\n        }\r\n        this.loading=true;\r\n        try {\r\n            //getting thedata from api \r\n            const swApiCall = await fetch('https://swapi.dev/api/people/');\r\n            const swchar = await swApiCall.json();\r\n            console.log(\"Chars are\", swchar.results)\r\n            //replacing the people array with data from api\r\n            this.people.replace(swchar.results);\r\n            \r\n            this.loading = false;\r\n        } catch (error) {\r\n            Alert.alert(\"Something went wrong!\");\r\n            this.loading = false;\r\n        } \r\n\r\n    }   \r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}