{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _temp;\n\nimport { observable, action } from 'mobx';\nexport var CharacterStore = (_class = (_temp = function () {\n  function CharacterStore() {\n    _classCallCheck(this, CharacterStore);\n\n    _initializerDefineProperty(this, \"people\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"loading\", _descriptor2, this);\n  }\n\n  _createClass(CharacterStore, [{\n    key: \"load\",\n    value: function load() {\n      var swApiCall, swchar;\n      return _regeneratorRuntime.async(function load$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.loading = true;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(fetch('https://swapi.dev/api/people/'));\n\n            case 3:\n              swApiCall = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(swApiCall.json());\n\n            case 6:\n              swchar = _context.sent;\n              console.log(\"Chars are\", swchar);\n              this.people.replace(swchar.results);\n              this.loading = false;\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return CharacterStore;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"people\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"loading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"load\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"load\"), _class.prototype)), _class);","map":{"version":3,"sources":["D:/PROGRAMIRANJE/StarWarsApp/swapp/store/CharacterStore.js"],"names":["observable","action","CharacterStore","loading","fetch","swApiCall","json","swchar","console","log","people","replace","results"],"mappings":";;;;;;;;;AAAA,SAAQA,UAAR,EAAoBC,MAApB,QAAkC,MAAlC;AAEC,WAAaC,cAAb;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOO,mBAAKC,OAAL,GAAa,IAAb;AAPP;AAAA,+CAQ+BC,KAAK,CAAC,+BAAD,CARpC;;AAAA;AAQaC,cAAAA,SARb;AAAA;AAAA,+CAS4BA,SAAS,CAACC,IAAV,EAT5B;;AAAA;AASaC,cAAAA,MATb;AAUOC,cAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,MAAzB;AACA,mBAAKG,MAAL,CAAYC,OAAZ,CAAoBJ,MAAM,CAACK,OAA3B;AACA,mBAAKT,OAAL,GAAe,KAAf;;AAZP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mFACIH,UADJ;AAAA;AAAA;AAAA;AAAA;AAAA,WACwB,EADxB;AAAA;AAAA,2EAGIA,UAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,WAGyB,KAHzB;AAAA;AAAA,yDAKIC,MALJ","sourcesContent":["import {observable, action } from 'mobx';\r\n\r\n export class CharacterStore {\r\n    @observable people = []\r\n   // @observable favPeople: [], \r\n    @observable loading = false\r\n    \r\n    @action\r\n    async load () {\r\n        this.loading=true;\r\n        const swApiCall = await fetch('https://swapi.dev/api/people/');\r\n        const swchar = await swApiCall.json();\r\n        console.log(\"Chars are\", swchar)\r\n        this.people.replace(swchar.results);\r\n        this.loading = false;\r\n    }    //@action addToFavList\r\n\r\n    /*@action async fetch characters() {\r\n        const swApiCall = await fetch('https://swapi.dev/api/people/');\r\n        const swchar = await swApiCall.json();\r\n        runInAction (() => {\r\n            people.replace([swchar.results]),\r\n            loading: false\r\n        }) \r\n    } catch (error) {\r\n            runInAction(() => {\r\n                console.log(\"Error fetching data-----------\", error);\r\n    */\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}