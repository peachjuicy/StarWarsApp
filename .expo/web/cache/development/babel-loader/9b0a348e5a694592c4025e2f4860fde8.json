{"ast":null,"code":"import _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _temp;\n\nimport { observable, action } from 'mobx';\nexport var CharacterStore = (_class = (_temp = function CharacterStore() {\n  _classCallCheck(this, CharacterStore);\n\n  _initializerDefineProperty(this, \"people\", _descriptor, this);\n\n  _initializerDefineProperty(this, \"loading\", _descriptor2, this);\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"people\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"loading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return true;\n  }\n})), _class);","map":{"version":3,"sources":["D:/PROGRAMIRANJE/StarWarsApp/swapp/store/CharacterStore.js"],"names":["observable","action","CharacterStore"],"mappings":";;;;;;;AAAA,SAAQA,UAAR,EAAoBC,MAApB,QAAkC,MAAlC;AAEC,WAAaC,cAAb;AAAA;;AAAA;;AAAA;AAAA,iFACIF,UADJ;AAAA;AAAA;AAAA;AAAA;AAAA,WACwB,EADxB;AAAA;AAAA,2EAGIA,UAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,WAG0B,IAH1B;AAAA;AAAA","sourcesContent":["import {observable, action } from 'mobx';\r\n\r\n export class CharacterStore {\r\n    @observable people = []\r\n   // @observable favPeople: [], \r\n    @observable loading =  true\r\n    \r\n    //@action addToFavList\r\n\r\n    /*@action async fetch characters() {\r\n        const swApiCall = await fetch('https://swapi.dev/api/people/');\r\n        const swchar = await swApiCall.json();\r\n        runInAction (() => {\r\n            people.replace([swchar.results]),\r\n            loading: false\r\n        }) \r\n    } catch (error) {\r\n            runInAction(() => {\r\n                console.log(\"Error fetching data-----------\", error);\r\n    */\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}